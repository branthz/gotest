package main

import (
	"fmt"
	"github.com/astaxie/beego/orm"
	_ "github.com/go-sql-driver/mysql"
	"time"
)

type personInfo struct {
	Id           int       `orm:"pk;auto"`
	Phone        string    `orm:"size(32);unique"`
	Uid          string    `orm:"size(32);unique"`
	Name         string    `orm:"size(64);null"`
	FamilyAddr   string    `orm:"size(64);null"`
	Countrycode  string    `orm:"size(16);null"`
	Email        string    `orm:"size(32);null"`
	Position     string    `orm:"size(64);null"`
	Familyaddr   string    `orm:"size(64);null"`
	Usertype     string    `orm:"size(32);null"`
	PersonFile   int       `orm:"unique"`
	HeadPortrait int       `orm:"int;null"`
	CreateTime   time.Time `orm:"auto_now_add"`
	Updated      time.Time `orm:"auto_now"`
	Status       int16     `orm:"column(Status)"`
	//Experience   *experience `orm:"null;rel(one);on_delete(set_null)"`
}

type experience struct {
	Id          int    `pk:"auto"`
	Uid         string `orm:"size(32);unique"`
	ProjectName string
	UrlLink     string
	ProjectData string `orm:"type(text)"`
	Using       bool
	PatentDesc  string `orm:"size(2048);null"`
	MoreInfo    string `orm:"size(1024);null"`
}

type personGroupInfo struct {
	Id    int    `pk:"auto"`
	Uid   string `orm:"size(32)"`
	Gid   string `orm:"size(32)"`
	Urole string `orm:"size(64);null"`
}

type groupInfo struct {
	Id             int    `pk:"auto"`
	Gid            string `orm:"size(32);unique"`
	Admin          string `orm:"size(32);unique"`
	Firmname       string
	FirmAddr       string
	FirmPhone      string `orm:"size(32);null"`
	FirmScale      string `orm:"size(32);null"`
	FirmDesc       string `orm:"type(text)"`
	CorpIntent     string `orm:"type(text)"`
	License        string
	LicenseFile    int
	CertficateFile int
	website        string
	Status         int16 `orm:"column(Status)"`
}

type studentinfo struct {
	Id          int    `pk:"auto"`
	Stuname     string `orm:"size(20);unique"`
	Stuidentify string `orm:"size(30)"`
	Desc        string `orm:"size(2048);null"`
	Age         int
	Father      string `form:"-"`
	Score       int    `orm:"int;unique"`
	Stubirth    time.Time
	Stuclass    string `orm:"type(text)"`
	Stumajor    string `orm:"size(30)"`
}

func init() {
	conn := "root" + ":" + "123456" + "@/" + "kittest" + "?charset=utf8"                       //组合成连接串
	orm.RegisterModel(new(studentinfo), new(groupInfo), new(personInfo), new(personGroupInfo)) //注册表studentinfo 如果没有会自动创建
	orm.RegisterDriver("mysql", orm.DR_MySQL)                                                  //注册mysql驱动
	orm.RegisterDataBase("default", "mysql", conn)                                             //设置conn中的数据库为默认使用数据库
	orm.RunSyncdb("default", false, false)                                                     //后一个使用true会带上很多打印信息，数据库操作和建表操作的；第二个为true代表强制创建表
}

func main() {
	orm.Debug = true
	dbObj := orm.NewOrm()
	var stuPtr *studentinfo = new(studentinfo)
	//stuPtr.Stuname = "xiaomim"
	//stuPtr.Id = 1
	stuPtr.Age = 10
	stuPtr.Stubirth = time.Now()
	stuPtr.Stuclass = "一年级1班"
	stuPtr.Stuidentify = "12345"
	stuPtr.Stumajor = "计算机"
	stuPtr.Score = 100
	var err error
	//err = dbObj.Upsert(stuPtr, "stuname")
	//fmt.Printf("====%v\n", err)
	_, err = dbObj.DeleteEx(stuPtr,"score","age")
	fmt.Printf("====%v\n", err)
	/*
		_, err = dbObj.Insert(stuPtr) //单条记录插入
		if err != nil {
			fmt.Printf("插入学生:%s信息出错。\n", stuPtr.Stuname)
		} else {
			fmt.Printf("插入学生:%s信息成功。\n", stuPtr.Stuname)
		}*/
}
